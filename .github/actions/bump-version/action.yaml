---
name: Bump version
description: Bumping semver version
author: ixxeL
inputs:
  update:
    description: update the version
    required: false
    default: "true"
  increment:
    description: type of increment
    required: false
    default: fix
  current-version:
    description: current version to update
    required: true
  component:
    description: component name
    required: false
outputs:
  VERSION:
    description: chart version
    value: ${{ steps.bump-version.outputs.VERSION }}

runs:
  using: composite
  steps:
    - id: bump-version
      run: |
        set +e
        echo -e "${BLUE}[ STEP - Bump version ] > Auto bumping version${BLANK}"
        REGEX="^(v?[0-9]+\.[0-9]+\.[0-9]+)$"
        if [[ ${{ inputs.update }} = true ]]
        then
          echo -e "${YELLOW}[ EXECUTING ] > Version auto update has been triggered for version ${PURPLE}${{ inputs.current-version }}${YELLOW} and increment type ${PURPLE}${{ inputs.increment }}${BLANK}"
          VERSION="${{ inputs.current-version }}"
          if [[ -n "${{ inputs.component }}" ]]
          then
            echo -e "${CYAN}[ INFO ] > component ${{ inputs.component }} detected${BLANK}"
            VERSION=$(echo "$VERSION" | sed 's/${{ inputs.component }}-//g')
            echo -e "${CYAN}[ INFO ] > evaluated version is ${VERSION}${BLANK}"
          fi
          if [[ ${VERSION} =~ ${REGEX} ]]
          then
            if [[ ${VERSION} == v* ]]; then
              has_v=true
              VERSION=$(echo "$VERSION" | sed 's/v//g')
              echo -e "${CYAN}[ INFO ] > v prefix detected${BLANK}"
            else
              has_v=false
            fi
            IFS=' ' read -r -a ver <<< "$(echo "$VERSION" | sed 's/\./ /g')"
            if [[ "${{ inputs.increment }}" = "fix" ]]
            then
              echo -e "${CYAN}[ INFO ] > Fix increment${BLANK}"
              ((ver[2]++))
            elif [[ "${{ inputs.increment }}" = "minor" ]]
            then
              echo -e "${CYAN}[ INFO ] > Minor increment${BLANK}"
              ((ver[1]++))
              ver[2]=0
            elif [[ "${{ inputs.increment }}" = "major" ]]
            then
              echo -e "${CYAN}[ INFO ] > Major increment${BLANK}"
              ((ver[0]++))
              ver[2]=0
              ver[1]=0
            else
              echo -e "${RED}[ ERROR ] > increment ${{ inputs.increment }} is not correct${BLANK}"
              exit 1
            fi
            NEW_VERSION=${ver[0]}.${ver[1]}.${ver[2]}
            if [[ "$has_v" == true ]]; then
              NEW_VERSION="v${NEW_VERSION}"
            fi
            if [[ -n "${{ inputs.component }}" ]]
            then
              NEW_VERSION="${{ inputs.component }}-${NEW_VERSION}"
            fi
            echo -e "${CYAN}[ INFO ] > The new version will be --> [[ ${YELLOW}${NEW_VERSION}${CYAN} ]]${BLANK}"
          else
            echo -e "${RED}[ ERROR ] > Version doesn't match regex.${BLANK}"
            exit 1
          fi
        else
          echo -e "${YELLOW}[ EXECUTING ] > Version will remain the same --> ${PURPLE}${{ inputs.current-version }}${BLANK}"
          NEW_VERSION=${{ inputs.current-version }}
        fi
        echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m
