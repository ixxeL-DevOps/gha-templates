---
name: Git push
description: Pushing git repo
author: ixxeL
inputs:
  git-token:
    required: false
    description: git token to push
  git-msg:
    required: false
    default: "ci"
    description: message of the commit
  git-workdir:
    required: false
    default: .
    description: working directory for git
  git-staging-dir:
    required: false
    default: .
    description: staging directory for git
  tls-verify:
    required: false
    default: "false"
    description: verify tls
  push-option:
    required: false
    default: "ci skip"
    description: push option for the commit
  repo-branch:
    required: false
    default: main
    description: default repo branch
  git-email:
    required: false
    default: username@users.noreply.github.com
    description: default git email
  # repo-url:
  #   required: true
outputs:
  GIT_PUSHED_COMMIT_SHA:
    description: Commit sha of the pushed ref
    value: ${{ steps.git-push.outputs.GIT_PUSHED_COMMIT_SHA }}

runs:
  using: composite
  steps:
    - id: git-push
      run: |
        set +e
        echo -e "${BLUE}[ STEP - TAG GIT REPO ] > Tagging git repo ${REPO_URL}${BLANK}"
        echo -e "${CYAN}[ INFO ] > Git version.${BLANK}"
        git version

        if [[ -n ${{ inputs.repo-branch }} ]]
        then
          echo -e "${CYAN}[ INFO ] > Using provided ref name ${{ inputs.repo-branch }}${BLANK}"
          GIT_REPO_BRANCH=${{ inputs.repo-branch }}
        else
          echo -e "${CYAN}[ INFO ] > Using current ref name ${GITHUB_REF_NAME}${BLANK}"
          GIT_REPO_BRANCH=${GITHUB_REF_NAME}
        fi
        # if [[ -n "${{ inputs.repo-url }}" ]]
        # then
        #   echo -e "${CYAN}[ INFO ] > Using provided repository URL for push --> ${{ inputs.repo-url }}${BLANK}"
        #   REPO_URL=$(echo "${{ inputs.repo-url }}" | sed 's/https:\/\///g')
        #   [[ ${REPO_URL} == *.git ]] || REPO_URL+=.git
        #   PUSH_URL="https://${GITHUB_ACTOR}:${{ inputs.git-token }}@${GITHUB_HOSTNAME}"
        # else
        #   echo -e "${CYAN}[ INFO ] > Using current repository URL for push --> ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git${BLANK}"
        #   GITHUB_HOSTNAME=$(echo "${GITHUB_SERVER_URL}" | sed 's/https:\/\///g')
        #   PUSH_URL="https://${GITHUB_ACTOR}:${{ inputs.git-token }}@${GITHUB_HOSTNAME}/${GITHUB_REPOSITORY}.git"
        # fi

        # echo -e "${CYAN}[ INFO ] > Setting URL origin to ${PUSH_URL}${BLANK}"
        # git -C ${{ inputs.git-workdir }} remote set-url origin ${PUSH_URL}

        echo -e "${YELLOW}[ EXECUTING ] > Showing repo information.${BLANK}"
        echo -e "${CYAN}[ INFO ] > git status.${BLANK}"
        git -C ${{ inputs.git-workdir }} -c color.status=always status
        echo -e "${CYAN}[ INFO ] > git diff.${BLANK}"
        git -C ${{ inputs.git-workdir }} diff --color=always
        echo -e "${CYAN}[ INFO ] > git branch${BLANK}"
        git -C ${{ inputs.git-workdir }} branch
        echo -e "${CYAN}[ INFO ] > git origin.${BLANK}"
        git -C ${{ inputs.git-workdir }} remote show origin

        echo -e "${CYAN}[ INFO ] > Commit and push on staging directory ${{ inputs.git-staging-dir }} to ${PUSH_URL}${BLANK}"
        git -C ${{ inputs.git-workdir }} add ${{ inputs.git-staging-dir }}
        git -C ${{ inputs.git-workdir }} commit -m "${{ inputs.git-msg }}"
        # git -C ${{ inputs.git-workdir }} remote set-url origin ${PUSH_URL}
        git -C ${{ inputs.git-workdir }} push origin --push-option ${{ inputs.push-option }} HEAD:${GIT_REPO_BRANCH}

        if [[ $? = 0 ]]
        then
          echo -e "${GREEN}[ SUCCESS ] > Git commit/push succeeded.${BLANK}"
          echo -e "${CYAN}[ INFO ] > Saving current commit SHA${BLANK}"
          CURRENT_COMMIT=$(git -C ${{ inputs.git-workdir }} rev-parse origin/${GIT_REPO_BRANCH})
          echo "GIT_PUSHED_COMMIT_SHA=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
          echo -e "${GREEN}[ SUCCESS ] > Commit SHA is ${YELLOW}${CURRENT_COMMIT}${BLANK}"
          exit 0
        else
          echo -e "${RED}[ FAIL ] > Git commit/push failed!.${BLANK}"
          exit 1
        fi
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m
