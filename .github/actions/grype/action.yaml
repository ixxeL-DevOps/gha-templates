---
name: Grype scan
description: Scanning docker image with Grype
author: ixxeL
inputs:
  image-ref:
    description: image reference
    required: true
  transport:
    description: transport type for destination (docker,docker-archive,oci-dir,oci-archive,dir,sbom,registry)
    required: false
    default: registry
  fail-on:
    description: set the return code to 1 if a vulnerability is found with a severity >= the given severity
    required: false
    default: '""'
  output:
    description: report output formatter, formats=[json table cyclonedx template]
    required: false
    default: table
  scope:
    description: selection of layers to analyze, options=[Squashed AllLayers]
    required: false
    default: Squashed
  template:
    description: specify the path to a Go template file (requires template output to be selected)
    required: false
    default: '""'
  verbose:
    description: increase verbosity (-v = info, -vv = debug)
    required: false
    default: ""

runs:
  using: composite
  steps:
    - id: grype-scan
      run: |
        set +e
        echo -e "${BLUE}[ STEP - VULNERABILITIES CHECK ] > Scanning ${{ inputs.image-ref }} for vulnerabilities.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Grype version.${BLANK}"
        grype version | grep -i "^version"
        echo -e "${YELLOW}[ EXECUTING ] > Updating Grype DB.${BLANK}"
        grype db update
        echo -e "${YELLOW}[ EXECUTING ] > Executing ${{ inputs.image-ref }} vuln scan.${BLANK}"
        grype ${{ inputs.transport }}:${{ inputs.image-ref }} --fail-on ${{ inputs.fail-on }} \
                                                              --output ${{ inputs.output }} \
                                                              --scope ${{ inputs.scope }} \
                                                              --template ${{ inputs.template }} \
                                                              ${{ inputs.verbose }}
        EXIT_CODE="${PIPESTATUS[0]}"
        if [[ ${EXIT_CODE} -ne 0 ]]
        then
          echo -e "${RED}[ FAIL ] > Grype scan failed !${BLANK}"
        else
          echo -e "${GREEN}[ SUCCESS ] > Grype scan succeeded !${BLANK}"
        fi
        exit ${EXIT_CODE}
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m
