---
name: Helm pull
description: Pull Helm chart with helm CLI
author: ixxeL
inputs:
  workingdir:
    description: directory in which to find the Dockerfile
    required: false
    default: .
  chart-name:
    description: name of the chart
    required: false
  chart-version:
    description: version of the chart
    required: false
  devel:
    required: false
    default: "false"
    description: use devel mode
  fetch-latest:
    description: pull latest chart
    required: false
    default: "true"
  untar:
    description: untar the chart or not
    required: false
    default: "false"
  repo-name:
    required: false
    default: test
    description: name of the repo
  repo-url:
    required: true
    description: url of the repo
  repo-username:
    required: true
    description: user name of the repo
  repo-password:
    required: true
    description: password of the repo
  force-update:
    required: false
    default: "true"
    description: force update mode
  skip-tls:
    required: false
    default: "true"
    description: skip tls verification
outputs:
  PULLED_PKG:
    description: chart name
    value: ${{ steps.helm-pull.outputs.PULLED_PKG }}
  PULLED_PKG_PATH:
    description: chart version
    value: ${{ steps.helm-pull.outputs.PULLED_PKG_PATH }}
  PULLED_PKG_DIR:
    description: chart appVersion
    value: ${{ steps.helm-pull.outputs.PULLED_PKG_DIR }}
  CHART_VERSION:
    description: chart version
    value: ${{ steps.helm-pull.outputs.CHART_VERSION }}
  CHART_APP_VERSION:
    description: chart appVersion
    value: ${{ steps.helm-pull.outputs.CHART_APP_VERSION }}

runs:
  using: composite
  steps:
    - id: helm-pull
      shell: bash
      run: |
        set +e
        echo -e "${BLUE}[ STEP - Helm-chart Pulling ] > Pulling Helm chart.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Helm version.${BLANK}"
        helm version --short

        echo -e "${YELLOW}[ EXECUTING ] > Adding helm repository ${{ inputs.repo-name }} ${{ inputs.repo-url }}.${BLANK}"
        helm repo add ${{ inputs.repo-name }} ${{ inputs.repo-url }} --force-update=${{ inputs.force-update }} \
                                                                     --username="${{ inputs.repo-username }}" \
                                                                     --password="${{ inputs.repo-password }}" \
                                                                     --insecure-skip-tls-verify=${{ inputs.skip-tls }}
        if [[ $? = 0 ]]
        then
          echo -e "${GREEN}[ SUCCESS ] > Helm repo ${{ inputs.repo-name }} ${{ inputs.repo-url }} added successfully !${BLANK}"
          echo -e "${CYAN}[ INFO ] > Displaying added repository${BLANK}"
          helm repo list
          echo -e "${CYAN}[ INFO ] > Displaying current charts in ${{ inputs.repo-name }}${BLANK}"
          helm search repo ${{ inputs.repo-name }} --devel=${{ inputs.devel }}
        else
          echo -e "${RED}[ ERROR ] > Helm repo ${{ inputs.repo-name }} ${{ inputs.repo-url }} failed to be added !${BLANK}"
          exit 1
        fi

        if [[ "${{ inputs.fetch-latest }}" = true ]]
        then
          echo -e "${YELLOW}[ EXECUTING ] > Fetching latest version.${BLANK}"
          LAST_CHART_VERSION=$(helm search repo ${{ inputs.repo-name }}/${{ inputs.chart-name }} --versions --devel=${{ inputs.devel }} --output json | jq -r '.[].version' | sort -V | tail -1)
          LAST_APP_VERSION=$(helm search repo ${{ inputs.repo-name }}/${{ inputs.chart-name }} --version ${LAST_CHART_VERSION} --devel=${{ inputs.devel }} --output json | jq -r '.[].app_version')
          echo -e "${CYAN}[ INFO ] > Last version for chart ${YELLOW}${{ inputs.repo-name }}/${{ inputs.chart-name }}${CYAN} is ${YELLOW}${LAST_CHART_VERSION}${CYAN} and appVersion ${YELLOW}${LAST_APP_VERSION}${BLANK}"
          PULL_APP_VERSION=${LAST_APP_VERSION}
          PULL_VERSION=${LAST_CHART_VERSION}
        else
          echo -e "${YELLOW}[ EXECUTING ] > Static version pulling${BLANK}"
          EXIST=$(helm search repo ${{ inputs.repo-name }}/${{ inputs.chart-name }} --versions --devel=${{ inputs.devel }} --output json | jq -r ".[] | select(.version|test(\"${{ inputs.chart-version }}\")) | .version" | sort -V | tail -1)
          if [[ "${EXIST}" = "" ]]
          then
            echo -e "${RED}[ FAIL ] > chart ${YELLOW}${{ inputs.chart-name }}${RED} version ${YELLOW}${{ inputs.chart-version }}${RED} wasn't found. Operation canceled.${BLANK}"
            exit 1
          else
            echo -e "${GREEN}[ CHECK OK ] > Version ${{ inputs.chart-version }} exists on the server${BLANK}"
            APP_VERSION=$(helm search repo ${{ inputs.repo-name }}/${{ inputs.chart-name }} --version ${{ inputs.chart-version }} --devel=${{ inputs.devel }} --output json | jq -r '.[].app_version')
            PULL_APP_VERSION=${APP_VERSION}
            PULL_VERSION=${{ inputs.chart-version }}
          fi
        fi

        echo -e "${YELLOW}[ EXECUTING ] > Pulling helm chart ${PURPLE}${{ inputs.chart-name }}${YELLOW} version ${PURPLE}${PULL_VERSION}${BLANK}"
        helm pull ${{ inputs.repo-name }}/${{ inputs.chart-name }} --version=${PULL_VERSION} \
                                                                   --destination=${{ inputs.workingdir }} \
                                                                   --insecure-skip-tls-verify=${{ inputs.skip-tls }} \
                                                                   --devel=${{ inputs.devel }} \
                                                                   --untar=${{ inputs.untar }}
        if [[ $? = 0 ]]
        then
          PULLED_PKG=$(find ${{ inputs.workingdir }} -maxdepth 1 -type f -regex ".*\.tgz" | awk -F '/' '{print $NF}')
          PULL_PKG_PATH=$(realpath ${{ inputs.workingdir }}/${PULLED_PKG})
          echo "PULLED_PKG=${PULLED_PKG}" >> $GITHUB_OUTPUT
          echo "PULLED_PKG_PATH=${PULL_PKG_PATH}" >> $GITHUB_OUTPUT
          echo "PULLED_PKG_DIR=${{ inputs.workingdir }}" >> $GITHUB_OUTPUT
          echo "CHART_VERSION=${PULL_VERSION}" >> $GITHUB_OUTPUT
          echo "CHART_APP_VERSION=${PULL_APP_VERSION}" >> $GITHUB_OUTPUT
          echo -e "${CYAN}[ INFO ] > Package [[ ${YELLOW}${PULLED_PKG}${CYAN} ]] pulled${BLANK}"
          echo -e "${GREEN}[ SUCCESS ] > Helm pull succeeded without any error${BLANK}"
        else
          echo -e "${RED}[ ERROR ] > Helm pull didn't succeed !${BLANK}"
          exit 1
        fi
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m
