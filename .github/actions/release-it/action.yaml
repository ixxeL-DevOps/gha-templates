---
name: Release it
description: Releasing version with node release-it
author: ixxeL
inputs:
  git-workdir:
    description: git working directory
    required: false
  increment-type:
    description: type of increment
    required: false
  git-tag:
    description: tag the branch
    required: false
  git-commit:
    description: commit the branch
    required: false
  git-push:
    description: push the branch
    required: false
  git-get-latest-tags-from-all-refs:
    description: fetch tags from all branches
    required: false
  git-require-commits:
    description: check for commits before releasing
    required: true
  github-release:
    description: enable github release
    required: false
  github-autogenerate:
    description: generate release automatically
    required: false
  github-pre-release:
    description: generate pre-release automatically
    required: false
  github-draft:
    description: use mode draft
    required: false
  npm-publish:
    description: npm publish artefact
    required: false
  npm-ignore-version:
    description: dont bump package.json
    required: false
outputs:
  VERSION:
    description: bumped version
    value: ${{ steps.release-it.outputs.VERSION }}

runs:
  using: composite
  steps:
    - id: release-it
      run: |
        set +e
        echo -e "${BLUE}[ STEP - Bump and Release version ] > Auto bumping and Releasing version with release-it${BLANK}"

        GIT_TAG="--git.tag"
        GIT_COMMIT="--git.commit"
        GIT_PUSH="--git.push"
        GIT_GET_LATEST_TAGS_FROM_ALL_REFS="--git.getLatestTagFromAllRefs"
        GIT_REQUIRE_COMMITS="--git.requireCommits"
        GITHUB_RELEASE="--github.release"
        GITHUB_AUTO_GENERATE="--github.autoGenerate"
        GITHUB_PRE_RELEASE="--github.preRelease"
        GITHUB_DRAFT="--github.draft"
        NPM_PUBLISH="--npm.publish"
        NPM_IGNORE_VERSION="--npm.ignoreVersion"

        adjust_flag(){
        local var_name="$1"
        local input_value="$2"
        if [[ "$input_value" == "false" ]]
        then
          eval "$var_name=\"--no-${!var_name#--}\""
        fi
        }

        adjust_flag GIT_TAG ${{ inputs.git-tag }}
        adjust_flag GIT_COMMIT ${{ inputs.git-commit }}
        adjust_flag GIT_PUSH ${{ inputs.git-push }}
        adjust_flag GIT_GET_LATEST_TAGS_FROM_ALL_REFS ${{ inputs.git-get-latest-tags-from-all-refs }}
        adjust_flag GIT_REQUIRE_COMMITS ${{ inputs.git-require-commits }}
        adjust_flag GITHUB_RELEASE ${{ inputs.github-release }}
        adjust_flag GITHUB_AUTO_GENERATE ${{ inputs.github-autogenerate }}
        adjust_flag GITHUB_PRE_RELEASE ${{ inputs.github-pre-release }}
        adjust_flag GITHUB_DRAFT ${{ inputs.github-draft }}
        adjust_flag NPM_PUBLISH ${{ inputs.npm-publish }}
        adjust_flag NPM_IGNORE_VERSION ${{ inputs.npm-ignore-version }}

        OPTIONS="${GIT_TAG} ${GIT_COMMIT} ${GIT_PUSH} ${GIT_GET_LATEST_TAGS_FROM_ALL_REFS} ${GIT_REQUIRE_COMMITS} ${GITHUB_RELEASE} ${GITHUB_AUTO_GENERATE} ${GITHUB_PRE_RELEASE} ${GITHUB_DRAFT} ${NPM_PUBLISH} ${NPM_IGNORE_VERSION}"
        echo -e "${CYAN}[ INFO ] > Args : ${OPTIONS}${BLANK}"
        echo -e "${YELLOW}[ EXECUTING ] > Bumping version with increment ${{ inputs.increment-type }}${BLANK}"
        npx release-it --ci \
                       -i ${{ inputs.increment-type }} \
                       --git.tagName='v${version}' \
                       ${GIT_TAG} \
                       ${GIT_COMMIT} \
                       ${GIT_PUSH} \
                       --git.commitMessage=':rocket: chore(release): release from CI v${version} [skip ci]' \
                       ${GIT_GET_LATEST_TAGS_FROM_ALL_REFS} \
                       ${GIT_REQUIRE_COMMITS} \
                       ${GITHUB_RELEASE} \
                       ${GITHUB_AUTO_GENERATE} \
                       --github.releaseName='Release v${version}' \
                       ${GITHUB_PRE_RELEASE} \
                       ${GITHUB_DRAFT} \
                       ${NPM_PUBLISH} \
                       ${NPM_IGNORE_VERSION} \
                       --'hooks.before:init="git fetch --prune --prune-tags origin"' \
                       --'hooks.after:bump="echo Successfully released ${name} v${version} to ${repo.repository}"' \
                       --'hooks.after:release="echo VERSION=v${version} >> $GITHUB_OUTPUT"'
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m
