---
name: Skopeo retag
description: Retagging image with skopeo
author: ixxeL
inputs:
  prepare:
    description: prepare binary install
    required: false
    default: "true"
  registry-url:
    description: URL of the registry to transfer image
    required: false
  registry-username:
    description: Username of the docker registry
    required: false
  registry-password:
    description: Password of the docker registry
    required: false
  src-img:
    description: source image to retag
    required: false
  src-tls:
    description: using tls for source
    required: false
    default: "false"
  dst-img:
    description: destination image to retag
    required: false
  dst-tls:
    description: using tls for destination
    required: false
    default: "false"
  format:
    description: image format
    required: false
    default: v2s2

runs:
  using: composite
  steps:
    - id: prepare
      if: ${{ inputs.prepare == 'true' }}
      run: |
        set +e
        sudo apt install skopeo
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m
    - id: skopeo-retag
      run: |
        set +e
        echo -e "${BLUE}[ STEP - IMAGE RETAG ] > Re-tagging docker image with Skopeo.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Skopeo version.${BLANK}"
        skopeo --version

        echo -e "${CYAN}[ INFO ] > Using classic login to ${PURPLE}${{ inputs.registry-url }}${BLANK}"
        skopeo login --username=${{ inputs.registry-username }} --password=${{ inputs.registry-password }} --tls-verify=false ${{ inputs.registry-url }}

        echo -e "${YELLOW}[ EXECUTING ] > Verifying image ${{ inputs.src-img }} exists in repository${BLANK}"
        image=$(echo "${{ inputs.src-img }}" | awk -F ":" '{print $1}')
        tag=$(echo "${{ inputs.src-img }}" | awk -F ":" '{print $2}')
        echo -e "${CYAN}[ INFO ] > Veryfying tag ${PURPLE}${tag}${BLANK}"
        skopeo_output=$(skopeo list-tags docker://${image} --tls-verify=${{ inputs.src-tls }})
        if [[ $(echo ${skopeo_output} | jq ".Tags" | jq ".[]" | jq "select(test(\"${tag}\"))") ]]
        then
          echo -e "${GREEN}[ CHECK SUCCESS ] > Docker image ${PURPLE}${{ inputs.src-img }}${GREEN} found in repository${BLANK}"
        else
          echo -e "${RED}[ STEP FAILED ] > Docker image ${PURPLE}${{ inputs.src-img }}${RED} NOT found in repository${BLANK}"
          exit 1
        fi

        echo -e "${YELLOW}[ EXECUTING ] > Executing ${PURPLE}${{ inputs.src-img }}${YELLOW} re-tagging to ${PURPLE}${{ inputs.dst-img }}${BLANK}"
        skopeo copy --insecure-policy \
                    --format ${{ inputs.format }} \
                    --src-tls-verify=${{ inputs.src-tls }} \
                    --dest-tls-verify=${{ inputs.dst-tls }} \
                    docker://${{ inputs.src-img }} \
                    docker://${{ inputs.dst-img }}
        if [[ $? -eq 0 ]]
        then
          echo -e "${GREEN}[ CHECK SUCCESS ] > Upload success${BLANK}"
        else
          echo -e "${RED}[ STEP FAILED ] > Something went wrong when uploading the docker image ${{ inputs.dst-img }} .${BLANK}"
          exit 1
        fi
        echo -e "${CYAN}[ INFO ] > Tags list for remote repo${BLANK}"
        skopeo list-tags docker://${image} --tls-verify=${{ inputs.dst-tls }} | jq -C
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m
