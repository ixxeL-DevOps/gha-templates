---
name: SVU
description: Semantic Versioning Utils
author: ixxeL
inputs:
  prepare:
    default: "true"
    required: false
    description: prepare env
  workingdir:
    required: false
    description: working directory
    default: .
  component:
    required: false
    default: ""
    description: note file or stdin
  build:
    required: false
    default: "false"
    description: use build
  build-pattern:
    required: false
    default: "build"
    description: build pattern to use
  prerelease:
    required: false
    default: "false"
    description: use prerelease
  prerelease-pattern:
    required: false
    default: "rc"
    description: prerelease pattern to use
outputs:
  CURRENT_TAG:
    description: current git tag
    value: ${{ steps.svu.outputs.CURRENT_TAG }}
  NEW_TAG:
    description: next git tag
    value: ${{ steps.svu.outputs.NEW_TAG }}

runs:
  using: composite
  steps:
    - id: prepare
      if: ${{ inputs.prepare == 'true' }}
      shell: bash
      run: |
        set +e
        mkdir -p target_dir
        wget -q https://github.com/caarlos0/svu/releases/download/v1.12.0/svu_1.12.0_linux_amd64.tar.gz -P target_dir
        cd target_dir || exit
        tar -xzvf svu_1.12.0_linux_amd64.tar.gz
        chmod +x svu
        mv svu /usr/local/bin/
        cd .. || exit
        rm -rf target_dir
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m
    - id: svu
      run: |
        set +e
        echo -e "${BLUE}[ STEP - SVU ] > Semantic Versioning Utils${BLANK}"
        echo -e "${CYAN}[ INFO ] > svu version.${BLANK}"
        svu --version

        if [ -n "${{ inputs.component }}" ]
        then
          COMPONENT="${{ inputs.component }}-"
        fi
        if [ "${{ inputs.build }}" == "true" ]
        then
          echo -e "${CYAN}[ INFO ] > Build mode activated${BLANK}"
        elif [ "${{ inputs.prerelease }}" == "true" ]
        then
          echo -e "${CYAN}[ INFO ] > Prerelease mode activated${BLANK}"
          PRERELEASE_PATTERN="-${{ inputs.prerelease-pattern }}*"
        else
          echo -e "${CYAN}[ INFO ] > General Availability mode activated${BLANK}"
        fi

        echo -e "${YELLOW}[ EXECUTING ] > Calculating current and next tag${BLANK}"
        CURRENT_TAG=$(svu current --prefix="${COMPONENT}v" --pattern="${COMPONENT}v[0-9]*.[0-9]*.[0-9]*${PRERELEASE_PATTERN}" --directory=${{ inputs.workingdir }})
        if [ $? -ne 0 ]
        then
          CURRENT_TAG=""
          if [ "${{ inputs.build }}" == "true" ]
          then
            NEW_TAG="$(svu next --prefix="${COMPONENT}v" --pattern="${COMPONENT}v[0-9]*.[0-9]*.[0-9]*" --directory=${{ inputs.workingdir }})-build-${{ github.run_number }}"
          elif [ "${{ inputs.prerelease }}" == "true" ]
          then
            CURRENT_TAG=$(svu current --prefix="${COMPONENT}v" --pattern="${COMPONENT}v[0-9]*.[0-9]*.[0-9]*" --directory=${{ inputs.workingdir }})
            if [ $? -ne 0 ]
            then
              CURRENT_TAG=""
              NEW_TAG="${COMPONENT}v0.1.0-${{ inputs.prerelease-pattern }}.0"
            else
              NEW_TAG=$(svu prerelease --pre-release=${{ inputs.prerelease-pattern }} --prefix="${COMPONENT}v" --pattern="${COMPONENT}v[0-9]*.[0-9]*.[0-9]*" --directory=${{ inputs.workingdir }})
              if [ "$(echo "$NEW_TAG" | awk -F "$PRERELEASE_PATTERN" '{print $1}')" == "$CURRENT_TAG" ]
              then
                echo -e "${RED}[ ERROR ] > Cancel to avoid irrelevant RC ${YELLOW}($NEW_TAG)${PURPLE} and GA ${YELLOW}($CURRENT_TAG)${PURPLE} version${BLANK}"
                echo -e "${RED}[ ERROR ] > You are trying to release a RC version not aligned with current GA version. Check that your commit messages trigger a bump (fix, feat) or that you are not on the same commit-sha.${BLANK}"
                exit 1
              fi
            fi
          else
            NEW_TAG="${COMPONENT}v0.1.0"
          fi
        else
          if [ "${{ inputs.build }}" == "true" ]
          then
            NEW_TAG="$(svu next --prefix="${COMPONENT}v" --pattern="${COMPONENT}v[0-9]*.[0-9]*.[0-9]*" --directory=${{ inputs.workingdir }})-build-${{ github.run_number }}"
          elif [ "${{ inputs.prerelease }}" == "true" ]
          then
            NEW_TAG=$(svu prerelease --pre-release=${{ inputs.prerelease-pattern }} --prefix="${COMPONENT}v" --pattern="${COMPONENT}v[0-9]*.[0-9]*.[0-9]*" --directory=${{ inputs.workingdir }})
          else
            NEW_TAG=$(svu next --prefix="${COMPONENT}v" --pattern="${COMPONENT}v[0-9]*.[0-9]*.[0-9]*" --directory=${{ inputs.workingdir }})
          fi
        fi
        if [ "${CURRENT_TAG}" == "${NEW_TAG}" ]
        then
          echo -e "${RED}[ ERROR ] > Current tag ${YELLOW}${CURRENT_TAG}${PURPLE} is same as new tag ${YELLOW}${NEW_TAG}${BLANK}"
          echo -e "${RED}[ ERROR ] > You are trying to release a version already existing. Check that your commit messages trigger a bump (fix, feat, fix! and feat!) or that you are not on the same commit-sha.${BLANK}"
          exit 1
        fi
        echo -e "${CYAN}[ INFO ] > Current tag is ${PURPLE}${CURRENT_TAG}${BLANK}"
        echo -e "${CYAN}[ INFO ] > New tag is ${PURPLE}${NEW_TAG}${BLANK}"
        echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_OUTPUT
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m