##################################################
# DO NOT CALL DIRECTLY THIS WORKFLOW ON PROJECTS #
##################################################
#
# Test, build and push docker image for a Java
# project using Gradle
#
---
name: CI build
on:
  workflow_call:
    secrets:
      git-admin-token:
        required: false
      git-token:
        required: false
      sonar-token:
        required: false
      snyk-token:
        required: false
      prisma-user:
        required: false
      prisma-pass:
        required: false
    inputs:
      # General
      workingdir:
        required: false
        type: string
        default: .
      image-name:
        required: false
        type: string
        default: test
      enable-acceptance-tests:
        required: false
        type: string
        default: "true"
        description: enables acceptance tests job
      enable-integration-tests:
        required: false
        type: string
        default: "true"
        description: enables integration tests job
      enable-unit-tests:
        required: false
        type: string
        default: "true"
        description: enables unit tests job
      setup-gradle:
        required: false
        type: string
        default: "true"
        description: force gradle setup
      environment:
        required: false
        type: string
        default: "development"
      quick-fail:
        required: false
        type: string
        default: "false"
        description: force qui failure behavior
      push-option:
        required: false
        default: ci.skip
        type: string
      git-enable-tag:
        required: false
        default: "true"
        type: string
      gh-release:
        required: false
        default: "false"
        type: string
      sonar-args:
        required: false
        default: "-Dsonar.organization=dktunited -Dsonar.projectKey=dktunited_whbox-printingbox-api -Dsonar.exclusions=src/main/jooq/** -Dsonar.host.url=https://sonarcloud.io -Dsonar.coverage.jacoco.xmlReportPaths=./backend/build/reports/jacoco.xml"
        type: string
      # GCP auth
      workload_identity_provider:
        required: false
        type: string
        default: "projects/208726332934/locations/global/workloadIdentityPools/ci-tools/providers/github"
      service_account:
        required: false
        type: string
        default: "github-writer@warehousebox-ntqf.iam.gserviceaccount.com"
      gcs-publish:
        required: false
        default: true
        type: boolean
      gcs-bucket-name:
        required: false
        type: string
      gcs-reports-path:
        required: false
        type: string
      # GAR
      docker-target-registry:
        required: false
        type: string
      gcp-base-url:
        required: false
        type: string
        default: europe-west4-docker.pkg.dev
      gcp-project-id:
        required: false
        type: string
        default: warehousebox-ntqf
      gcp-gar-id:
        required: false
        type: string
        default: whbox-docker-images
      docker-buildargs:
        required: false
        type: string
      docker-sbom:
        required: false
        default: true
        type: boolean
      docker-provenance:
        required: false
        default: true
        type: boolean
      # Vault
      vault-enabled:
        required: false
        default: false
        type: boolean
      vault-url:
        required: false
        default: https://vault.pp.dktapp.cloud
        type: string
      vault-namespace:
        required: false
        default: inix
        type: string
      vault-role:
        required: false
        default: whbox-ga-role
        type: string
      vault-secret-path:
        required: false
        default: whbox-tools/data/gh-actions
        type: string
jobs:
  static-analysis:
    name: "\U0001F50D Static analysis"
    timeout-minutes: 10
    runs-on: [self-hosted, decathlon]
    steps:
      - name: üßπ Pre-clean
        uses: dktunited/.github/actions/cleaner@main
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: Official Gradle Wrapper Validation Action
        uses: gradle/wrapper-validation-action@v1
      - name: Hadolint Dockerfile Scan
        uses: hadolint/hadolint-action@v3.1.0
        continue-on-error: true
        with:
          dockerfile: ${{ inputs.workingdir }}/Dockerfile
          verbose: true
          failure-threshold: info
      - name: "\U0001F6AB Cancel workflow run"
        if: failure() && inputs.quick-fail
        uses: ixxeL-DevOps/gha-templates/.github/actions/gh-run-cancel@main
        with:
          run-id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.git-admin-token }}
  unit-tests:
    if: inputs.enable-unit-tests == 'true'
    name: "\U0001F9EA Unit tests"
    timeout-minutes: 12
    runs-on: [self-hosted, decathlon]
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      discussions: write
      pull-requests: write
    steps:
      - name: üßπ Pre-clean
        uses: dktunited/.github/actions/cleaner@main
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: ‚òÅÔ∏è GCloud auth
        id: auth
        uses: dktunited/.github/actions/gcloud_workload_identity@main
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          java-package: "jdk"
          distribution: "temurin"
          check-latest: false
          settings-path: ${{ github.workspace }}
      - name: üêò Setup Gradle
        if: inputs.setup-gradle == 'true'
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: ${{ inputs.workingdir }}
          cache-overwrite-existing: true
      - name: Unit tests (Gradlew)
        uses: ixxeL-DevOps/gha-templates/.github/actions/gradlew@main
        with:
          workingdir: ${{ inputs.workingdir }}
          cmd: "clean check"
      - name: Jacoco code coverage (Gradlew)
        uses: ixxeL-DevOps/gha-templates/.github/actions/gradlew@main
        with:
          workingdir: ${{ inputs.workingdir }}
          cmd: "jacocoTestReport"
      - name: Prepare upload
        run: |
          jacoco_report=$(find ${{ inputs.workingdir }} -maxdepth 3 -type f -name "jacoco.xml")
          mv ${jacoco_report} ${{ inputs.workingdir }}/jacoco-unit.xml
      - name: Upload TU Jacoco report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-tu
          path: ${{ inputs.workingdir }}/jacoco-unit.xml
      - name: "\U0001F6AB Cancel workflow run"
        if: failure() && inputs.quick-fail == 'true'
        uses: ixxeL-DevOps/gha-templates/.github/actions/gh-run-cancel@main
        with:
          run-id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.git-admin-token }}
  acceptance-tests:
    if: inputs.enable-acceptance-tests == 'true'
    name: "\U0001F9EA Acceptance tests"
    timeout-minutes: 12
    runs-on: [self-hosted, decathlon]
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      discussions: write
      pull-requests: write
    steps:
      - name: üßπ Pre-clean
        uses: dktunited/.github/actions/cleaner@main
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: ‚òÅÔ∏è GCloud auth
        id: auth
        uses: dktunited/.github/actions/gcloud_workload_identity@main
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          java-package: "jdk"
          distribution: "temurin"
          check-latest: false
          settings-path: ${{ github.workspace }}
      - name: üêò Setup Gradle
        if: inputs.setup-gradle == 'true'
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: ${{ inputs.workingdir }}
          cache-overwrite-existing: true
      - name: Acceptance tests (Gradlew)
        id: acceptance
        uses: ixxeL-DevOps/gha-templates/.github/actions/gradlew@main
        with:
          workingdir: ${{ inputs.workingdir }}
          cmd: "acceptance"
      - name: Jacoco code coverage (Gradlew)
        uses: ixxeL-DevOps/gha-templates/.github/actions/gradlew@main
        with:
          workingdir: ${{ inputs.workingdir }}
          cmd: "jacocoTestReport"
      - name: Prepare upload
        run: |
          jacoco_report=$(find ${{ inputs.workingdir }} -maxdepth 3 -type f -name "jacoco.xml")
          mv ${jacoco_report} ${{ inputs.workingdir }}/jacoco-acceptance.xml
      - name: Upload TA Jacoco report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-ta
          path: ${{ inputs.workingdir }}/jacoco-acceptance.xml
      - name: Publish acceptance tests report for PR
        uses: google-github-actions/upload-cloud-storage@v1
        if: github.event.pull_request != null && inputs.gcs-publish
        continue-on-error: true
        with:
          path: ${{ inputs.workingdir }}/build/reports/serenity
          destination: ${{ format('{0}/{1}/pr-{2}', inputs.gcs-bucket-name, inputs.gcs-reports-path, github.event.pull_request.number) }}
          parent: false
          gzip: false
          glob: "**/*.!(csv|json|xml)"
          process_gcloudignore: false
      - name: Publish acceptance tests report as latest
        uses: google-github-actions/upload-cloud-storage@v1
        if: (contains( github.ref, 'main' ) || contains( github.ref, 'master' )) &&  github.event.pull_request == null && inputs.gcs-publish
        continue-on-error: true
        with:
          path: ${{ inputs.workingdir }}/build/reports/serenity
          destination: ${{ format('{0}/{1}/latest', inputs.gcs-bucket-name, inputs.gcs-reports-path) }}
          parent: false
          gzip: false
          glob: "**/*.!(csv|json|xml)"
          process_gcloudignore: false
      - name: Update Pull Request with acceptance tests report URL
        if: github.event.pull_request != null
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { REPORTS_BASE_URL, GCS_REPORTS_PATH } = process.env
            const output = `#### Acceptance tests \`${{ steps.acceptance.outcome }}\`
            ${REPORTS_BASE_URL}/${GCS_REPORTS_PATH}/pr-${{ github.event.pull_request.number }}
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            const number = ${{ github.event.pull_request.number }};
            github.rest.issues.createComment({
              issue_number: number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: "\U0001F6AB Cancel workflow run"
        if: failure() && inputs.quick-fail == 'true'
        uses: ixxeL-DevOps/gha-templates/.github/actions/gh-run-cancel@main
        with:
          run-id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.git-admin-token }}
  integration-tests:
    if: inputs.enable-integration-tests == 'true'
    name: "\U0001F9EA Integration tests"
    timeout-minutes: 12
    runs-on: [self-hosted, decathlon]
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      discussions: write
      pull-requests: write
    steps:
      - name: üßπ Pre-clean
        uses: dktunited/.github/actions/cleaner@main
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: ‚òÅÔ∏è GCloud auth
        id: auth
        uses: dktunited/.github/actions/gcloud_workload_identity@main
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          java-package: "jdk"
          distribution: "temurin"
          check-latest: false
          settings-path: ${{ github.workspace }}
      - name: üêò Setup Gradle
        if: inputs.setup-gradle == 'true'
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: ${{ inputs.workingdir }}
          cache-overwrite-existing: true
      - name: Integration tests (Gradlew)
        uses: ixxeL-DevOps/gha-templates/.github/actions/gradlew@main
        with:
          workingdir: ${{ inputs.workingdir }}
          cmd: "integration"
      - name: Jacoco code coverage (Gradlew)
        uses: ixxeL-DevOps/gha-templates/.github/actions/gradlew@main
        with:
          workingdir: ${{ inputs.workingdir }}
          cmd: "jacocoTestReport"
      - name: Prepare upload
        run: |
          jacoco_report=$(find ${{ inputs.workingdir }} -maxdepth 3 -type f -name "jacoco.xml")
          mv ${jacoco_report} ${{ inputs.workingdir }}/jacoco-integration.xml
      - name: Upload TI Jacoco report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-ti
          path: ${{ inputs.workingdir }}/jacoco-integration.xml
      - name: "\U0001F6AB Cancel workflow run"
        if: failure() && inputs.quick-fail == 'true'
        uses: ixxeL-DevOps/gha-templates/.github/actions/gh-run-cancel@main
        with:
          run-id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.git-admin-token }}
  docker-build:
    name: "\U0001F433 Build docker"
    timeout-minutes: 12
    runs-on: [self-hosted, decathlon]
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      discussions: write
      pull-requests: write
    steps:
      - name: üßπ Pre-clean
        uses: dktunited/.github/actions/cleaner@main
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          java-package: "jdk"
          distribution: "temurin"
          check-latest: false
          settings-path: ${{ github.workspace }}
      - name: ‚òÅÔ∏è GCloud auth
        id: auth
        uses: dktunited/.github/actions/gcloud_workload_identity@main
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
      - name: GCloud GAR Authentication
        id: gcloud-gar-auth
        uses: ixxeL-DevOps/gha-templates/.github/actions/gcloud-gar-auth@main
        with:
          registry: ${{ inputs.gcp-base-url }}
      - name: üêò Setup Gradle
        if: inputs.setup-gradle == 'true'
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: ${{ inputs.workingdir }}
          cache-overwrite-existing: true
      - name: "\U0001F4E6 Build code (Gradlew)"
        uses: ixxeL-DevOps/gha-templates/.github/actions/gradlew@main
        with:
          workingdir: ${{ inputs.workingdir }}
          cmd: "clean bootJar"
      - name: Snyk Scan
        uses: dktunited/security/snyk@main
        continue-on-error: true
        with:
          snyk-token: ${{ secrets.snyk-token }}
          snyk-conf-is-pipeline-breakable: false
          snyk-conf-severity-threshold: "low"
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7
      # Triggered when the commit is made on a non-trunk branch with an opened/opening PR
      - name: "\U0001F433 Build docker buildx [PR]"
        uses: docker/build-push-action@v5
        if: (steps.branch-name.outputs.is_default == 'false') && (!contains( github.ref, 'main' ) || !contains( github.ref, 'master' )) && github.event.pull_request != null
        with:
          context: ${{ inputs.workingdir }}
          platforms: linux/amd64
          push: false
          sbom: ${{ inputs.docker-sbom }}
          provenance: ${{ inputs.docker-provenance }}
          build-args: |
            ${{ inputs.docker-buildargs }}
          tags: |
            ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:${{ steps.branch-name.outputs.base_ref_branch }}-${{ github.run_number }}
            ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:PR-${{ github.event.pull_request.number }}
            ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:latest
      # Triggered when the commit is made on a non-trunk branch without an opened/opening PR
      - name: "\U0001F433 Build docker buildx [SLB]"
        uses: docker/build-push-action@v5
        if: (steps.branch-name.outputs.is_default == 'false') && (!contains( github.ref, 'main' ) || !contains( github.ref, 'master' )) &&  github.event.pull_request == null
        with:
          context: ${{ inputs.workingdir }}
          platforms: linux/amd64
          push: false
          sbom: ${{ inputs.docker-sbom }}
          provenance: ${{ inputs.docker-provenance }}
          build-args: |
            ${{ inputs.docker-buildargs }}
          tags: |
            ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:${{ steps.branch-name.outputs.default_branch }}-${{ github.run_number }}
            ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:latest
      # Triggered when the commit is made on the trunk
      - name: "\U0001F433 Build docker buildx and push to GAR [Trunk]"
        uses: docker/build-push-action@v5
        if: (steps.branch-name.outputs.is_default == 'true') && (contains( github.ref, 'main' ) || contains( github.ref, 'master' ))
        with:
          context: ${{ inputs.workingdir }}
          platforms: linux/amd64
          push: true
          sbom: ${{ inputs.docker-sbom }}
          provenance: ${{ inputs.docker-provenance }}
          build-args: |
            ${{ inputs.docker-buildargs }}
          tags: |
            ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:sha-${{ github.sha }}
            ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:latest
      - name: Run Prisma scan on docker image
        uses: dktunited/.github/actions/prisma@main
        with:
          docker-image: ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:latest
          prisma-user: ${{ secrets.prisma-user }}
          prisma-pass: ${{ secrets.prisma-pass }}
      - name: "\U0001F6AB Cancel workflow run"
        if: failure() && inputs.quick-fail == 'true'
        uses: ixxeL-DevOps/gha-templates/.github/actions/gh-run-cancel@main
        with:
          run-id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.git-admin-token }}
  Sonar-analysis:
    name: "üåÄ Sonar Analysis"
    timeout-minutes: 6
    runs-on: [self-hosted, decathlon]
    environment: ${{ inputs.environment }}
    needs: [unit-tests, acceptance-tests, integration-tests]
    permissions:
      id-token: write
      contents: read
      discussions: write
      pull-requests: write
    if: always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure'))
    steps:
      - name: üßπ Pre-clean
        uses: dktunited/.github/actions/cleaner@main
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          java-package: "jdk"
          distribution: "temurin"
          check-latest: false
          settings-path: ${{ github.workspace }}
      - name: ‚òÅÔ∏è GCloud auth
        id: auth
        uses: dktunited/.github/actions/gcloud_workload_identity@main
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
      - name: üêò Setup Gradle
        if: inputs.setup-gradle == 'true'
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: ${{ inputs.workingdir }}
          cache-overwrite-existing: true
      - name: Download reports
        uses: actions/download-artifact@v3
        with:
          path: ${{ inputs.workingdir }}/build/jacoco
      - name: Sonarqube report (Gradlew)
        uses: ixxeL-DevOps/gha-templates/.github/actions/gradlew@main
        with:
          workingdir: ${{ inputs.workingdir }}
          cmd: "sonarqube -Dsonar.token=${{ secrets.sonar-token }} -Dsonar.scm.revision=${{ github.ref }} -Dsonar.coverage.jacoco.xmlReportPaths=build/jacoco/**/*.xml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Release-docker:
    name: "\U0001F680 Release Docker image"
    timeout-minutes: 6
    runs-on: [self-hosted, decathlon]
    environment: ${{ inputs.environment }}
    needs:
      [
        static-analysis,
        unit-tests,
        acceptance-tests,
        integration-tests,
        docker-build,
      ]
    permissions:
      id-token: write
      contents: read
      discussions: write
      pull-requests: write
    if: always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && (contains( github.ref, 'main' ) || contains( github.ref, 'master' )) && github.event.pull_request == null
    steps:
      - name: üßπ Pre-clean
        uses: dktunited/.github/actions/cleaner@main
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7
      - name: ‚òÅÔ∏è GCloud auth
        id: auth
        uses: dktunited/.github/actions/gcloud_workload_identity@main
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
      - name: GCloud GAR Authentication
        id: gcloud-gar-auth
        uses: ixxeL-DevOps/gha-templates/.github/actions/gcloud-gar-auth@main
        with:
          registry: ${{ inputs.gcp-base-url }}
      - name: üè∑Ô∏è GCloud add tag
        id: gcloud-add-tag
        uses: ixxeL-DevOps/gha-templates/.github/actions/gcloud-add-tag@main
        with:
          image-fullname: ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}
          src-image-tag: sha-${{ github.sha }}
          dst-image-tag: ${{ steps.branch-name.outputs.current_branch }}-${{ github.run_number }}
  Release-git:
    name: "\U0001F680 Release Github"
    timeout-minutes: 6
    runs-on: [self-hosted, decathlon]
    environment: ${{ inputs.environment }}
    needs:
      [
        static-analysis,
        unit-tests,
        acceptance-tests,
        integration-tests,
        docker-build,
      ]
    permissions:
      id-token: write
      contents: read
      discussions: write
      pull-requests: write
    if: always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && (contains( github.ref, 'main' ) || contains( github.ref, 'master' )) && github.event.pull_request == null && inputs.git-enable-tag == 'true'
    steps:
      - name: Get secrets
        id: get-secrets
        if: inputs.vault-enabled == true
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ inputs.vault-url }}
          namespace: ${{ inputs.vault-namespace }}
          method: jwt
          role: ${{ inputs.vault-role }}
          secrets: |
            ${{ inputs.vault-secret-path }} GHA_PERSONNAL_ADMIN_TOKEN | GHA_PERSONNAL_ADMIN_TOKEN
      - name: üì• Checkout code with Vault
        uses: actions/checkout@v4
        if: inputs.vault-enabled == true
        with:
          fetch-depth: "0"
          token: ${{ steps.get-secrets.outputs.GHA_PERSONNAL_ADMIN_TOKEN }}
      - name: üì• Checkout code
        uses: actions/checkout@v4
        if: inputs.vault-enabled == false
        with:
          fetch-depth: "0"
          token: ${{ secrets.git-admin-token }}
      - name: Git config
        id: git-config
        uses: ixxeL-DevOps/gha-templates/.github/actions/git-config@main
        with:
          git-workdir: ${{ inputs.workingdir }}
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v7
      - name: üè∑Ô∏è Git tag
        id: git-tag
        if: inputs.gh-release == 'false'
        uses: ixxeL-DevOps/gha-templates/.github/actions/git-tag@main
        with:
          tag-msg: "CI auto Git tag for ${{ steps.branch-name.outputs.current_branch }}-${{ github.run_number }}"
          tag-value: ${{ steps.branch-name.outputs.current_branch }}-${{ github.run_number }}
          commit-sha: ${{ github.sha }}
          git-workdir: ${{ inputs.workingdir }}
          push-option: ${{ inputs.push-option }}
      - name: GH Release with Vault
        id: gh-release-vault
        if: inputs.vault-enabled && inputs.gh-release == 'true'
        uses: ixxeL-DevOps/gha-templates/.github/actions/gh-release@main
        with:
          tag: ${{ steps.branch-name.outputs.current_branch }}-${{ github.run_number }}
          verify-tag: false
          target-branch: ${{ steps.branch-name.outputs.current_branch }}
        env:
          GH_TOKEN: ${{ steps.get-secrets.outputs.GHA_PERSONNAL_ADMIN_TOKEN }}
      - name: GH Release
        id: gh-release
        if: inputs.vault-enabled == false && inputs.gh-release == 'true'
        uses: ixxeL-DevOps/gha-templates/.github/actions/gh-release@main
        with:
          tag: ${{ steps.branch-name.outputs.current_branch }}-${{ github.run_number }}
          verify-tag: false
          target-branch: ${{ steps.branch-name.outputs.current_branch }}
        env:
          GH_TOKEN: ${{ secrets.git-admin-token }}
  Rollback:
    name: ‚ôªÔ∏è Cleaning failed images
    timeout-minutes: 6
    runs-on: [self-hosted, decathlon]
    environment: ${{ inputs.environment }}
    needs:
      [
        static-analysis,
        unit-tests,
        acceptance-tests,
        integration-tests,
        docker-build,
      ]
    permissions:
      id-token: write
      contents: read
      discussions: write
      pull-requests: write
    if: failure() && (contains( github.ref, 'main' ) || contains( github.ref, 'master' )) && github.event.pull_request == null
    steps:
      - name: üßπ Pre-clean
        uses: dktunited/.github/actions/cleaner@main
      - name: üì• Checkout code
        uses: actions/checkout@v4
      - name: ‚òÅÔ∏è GCloud auth
        id: auth
        uses: dktunited/.github/actions/gcloud_workload_identity@main
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}
      - name: GCloud GAR Authentication
        id: gcloud-gar-auth
        uses: ixxeL-DevOps/gha-templates/.github/actions/gcloud-gar-auth@main
        with:
          registry: ${{ inputs.gcp-base-url }}
      - name: Delete image from GAR
        id: gcloud-delete-img
        uses: ixxeL-DevOps/gha-templates/.github/actions/gcloud-delete-img@main
        with:
          docker-img: ${{ inputs.docker-target-registry }}/${{ inputs.image-name }}:sha-${{ github.sha }}
