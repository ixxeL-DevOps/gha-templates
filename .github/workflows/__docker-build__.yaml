---
name: Building docker image
on:
  workflow_call:
    secrets:
      docker-io-pwd:
        required: false
      registry-password:
        required: false
      git-token:
        required: false
      gh-app-id:
        required: false
      gh-app-private-key:
        required: false
    inputs:
      # General
      retag-binary:
        required: false
        type: string
        default: "crane"
      prerelease:
        required: false
        default: "false"
        type: string
      build-image:
        required: false
        default: ixxel/toolbox:builder-latest
        type: string
      workingdir:
        required: false
        default: .
        type: string
      img-name:
        required: true
        type: string
      tag:
        required: false
        type: string
      build-arg:
        required: false
        default: "CI=true"
        type: string
      target-dir:
        required: false
        default: artefacts
        type: string
      component:
        required: false
        type: string
      # docker login
      docker-config:
        required: false
        default: true
        type: boolean
      registry-url:
        required: true
        type: string
      registry-username:
        required: true
        type: string
      # podman-password:
      #   required: true
      #   type: string
      tls-verify:
        required: false
        type: boolean
      # buildkit
      dockerfile-name:
        required: false
        default: Dockerfile
        type: string
      caching:
        required: false
        default: true
        type: boolean
      cache-registry:
        required: false
        type: string
      push:
        description: Push img
        required: false
        default: true
        type: boolean
      # git tag
      git-workdir:
        required: false
        default: .
        type: string
      tag-msg:
        required: false
        default: "ci"
        type: string
      push-option:
        required: false
        default: ci.skip
        type: string
      git-email:
        required: false
        default: test@mail.com
        type: string
        # repo-url:
        #   required: true
      release-verify-tag:
        required: false
        default: false
        type: boolean
      always-bump:
        required: false
        default: "true"
        type: string

  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-img:
    name: Build
    timeout-minutes: 15
    runs-on: ubuntu-latest
    # container:
    #   image: ${{ inputs.build-image }}
    #   options: --privileged
    steps:
      - name: Clone repo
        id: clone
        uses: ixxeL-DevOps/gha-templates/.github/actions/git-clone@main
        with:
          mode: "app"
          app-id: ${{ secrets.gh-app-id }}
          private-key: ${{ secrets.gh-app-private-key }}
          fetch-depth: 0

      - name: Hadolint Dockerfile Scan
        uses: hadolint/hadolint-action@v3.1.0
        id: hadolint
        continue-on-error: true
        with:
          dockerfile: ${{ inputs.workingdir }}/Dockerfile
          verbose: true
          failure-threshold: info

      - name: Update PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ steps.clone.outputs.TOKEN }}
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry-url }}
          username: ${{ inputs.registry-username }}
          password: ${{ secrets.registry-password }}
          logout: false

      - name: Define Docker image tag
        id: define-tag
        run: |
          echo -e "${BLUE}[ STEP - DEFINE TAG ] > Defining target tag${BLANK}"
          if [[ "${{ inputs.component }}" == '' ]]
          then
            TARGET_TAG="sha-${GITHUB_SHA:0:7}"
          else
            TARGET_TAG="${{ inputs.component }}-sha-${GITHUB_SHA:0:7}"
          fi
          echo -e "${YELLOW}[ INFO ] > Target tag is ${PURPLE}${TARGET_TAG}${BLANK}"
          echo "TARGET_TAG=${TARGET_TAG}" >> "$GITHUB_OUTPUT"
        shell: bash
        env:
          RED: \033[1;31m
          GREEN: \033[1;32m
          YELLOW: \033[1;33m
          BLUE: \033[1;34m
          PURPLE: \033[1;35m
          CYAN: \033[1;36m
          BLANK: \033[0m

      - name: Define Docker image PR tag
        id: define-pr-tag
        if: github.event_name == 'pull_request'
        run: |
          echo -e "${BLUE}[ STEP - DEFINE TAG ] > Defining target PR tag${BLANK}"
          if [[ "${{ inputs.component }}" == '' ]]
          then
            TARGET_PR_TAG="pr-${{ github.event.pull_request.number }}"
          else
            TARGET_PR_TAG="${{ inputs.component }}-pr-${{ github.event.pull_request.number }}"
          fi
          echo -e "${YELLOW}[ INFO ] > Target PR tag is ${PURPLE}${TARGET_PR_TAG}${BLANK}"
          echo "TARGET_PR_TAG=${TARGET_PR_TAG}" >> "$GITHUB_OUTPUT"
        shell: bash
        env:
          RED: \033[1;31m
          GREEN: \033[1;32m
          YELLOW: \033[1;33m
          BLUE: \033[1;34m
          PURPLE: \033[1;35m
          CYAN: \033[1;36m
          BLANK: \033[0m

      - name: Check PR origin
        if: github.event_name != 'pull_request'
        uses: ixxeL-DevOps/gha-templates/.github/actions/gh-pr-origin@main
        id: pr-origin
        with:
          commit: ${{ github.sha }}
        env:
          GH_TOKEN: ${{ steps.clone.outputs.TOKEN }}

      - name: Build Docker img [PR]
        uses: docker/build-push-action@v5
        if: github.event_name == 'pull_request'
        with:
          context: ${{ inputs.workingdir }}
          platforms: linux/amd64
          push: false
          load: true
          sbom: false
          provenance: false
          cache-from: type=registry,ref=${{ inputs.cache-registry }}/${{ inputs.img-name }}:buildcache
          cache-to: type=registry,ref=${{ inputs.cache-registry }}/${{ inputs.img-name }}:buildcache,mode=max
          build-args: |
            ${{ inputs.build-arg }}
          tags: |
            ${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ steps.define-pr-tag.outputs.TARGET_PR_TAG }}

      - name: Calculate current and next tag
        id: svu
        uses: ixxeL-DevOps/gha-templates/.github/actions/svu@main
        if: github.event_name != 'pull_request'
        with:
          workingdir: ${{ inputs.workingdir }}
          component: ${{ inputs.component }}
          prerelease: ${{ inputs.prerelease }}
          build: "true"
          always-bump: ${{ inputs.always-bump }}

      - name: Build Docker img [Trunk]
        uses: docker/build-push-action@v5
        if: github.event_name != 'pull_request'  && steps.pr-origin.outputs.PR_NUMBER == ''
        with:
          context: ${{ inputs.workingdir }}
          platforms: linux/amd64
          push: true
          sbom: false
          provenance: false
          cache-from: type=registry,ref=${{ inputs.cache-registry }}/${{ inputs.img-name }}:buildcache
          cache-to: type=registry,ref=${{ inputs.cache-registry }}/${{ inputs.img-name }}:buildcache,mode=max
          build-args: |
            ${{ inputs.build-arg }}
          tags: |
            ${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ steps.define-tag.outputs.TARGET_TAG }}
            ${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ steps.svu.outputs.NEW_TAG }}

      - name: Skopeo retag [ Artefact promotion ]
        if: inputs.retag-binary == 'skopeo' && github.event_name != 'pull_request' && steps.pr-origin.outputs.PR_NUMBER != ''
        uses: ixxeL-DevOps/gha-templates/.github/actions/skopeo-retag@main
        id: skopeo-retag
        with:
          registry-url: ${{ inputs.registry-url }}
          registry-username: ${{ inputs.registry-username }}
          registry-password: ${{ secrets.registry-password }}
          src-img: ${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ steps.define-pr-tag.outputs.TARGET_PR_TAG }}
          dst-img: ${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ steps.define-tag.outputs.TARGET_TAG }}

      - name: Crane retag [ Artefact promotion ]
        if: inputs.retag-binary == 'crane' && github.event_name != 'pull_request' && steps.pr-origin.outputs.PR_NUMBER != ''
        uses: ixxeL-DevOps/gha-templates/.github/actions/crane-retag@main
        id: crane-retag
        with:
          registry-url: ${{ inputs.registry-url }}
          registry-username: ${{ inputs.registry-username }}
          registry-password: ${{ secrets.registry-password }}
          src-img: ${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ steps.define-pr-tag.outputs.TARGET_PR_TAG }}
          dst-tag: ${{ steps.define-tag.outputs.TARGET_TAG }}
