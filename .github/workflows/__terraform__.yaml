name: Terraform
on:
  workflow_call:
    secrets:
      git-token:
        required: true
    inputs:
      workingdir:
        required: false
        default: "."
        type: string
      environment:
        required: false
        type: string
        default: "development"
      tf-version:
        required: false
        default: latest
        type: string
      tf-workspace:
        required: false
        default: default
        type: string
      tf-fmt-recursive:
        required: false
        default: "true"
        type: string
      tf-vars-file:
        required: false
        default: "terraform.tfvars"
        type: string

permissions:
  id-token: write
  contents: read
  pull-requests: write
jobs:
  terraform:
    name: Terraform
    timeout-minutes: 15
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    # container:
    #   image: ${{ inputs.build-image }}
    defaults:
      run:
        working-directory: ${{ inputs.workingdir }}
    steps:
      - name: Clone code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf-version }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive=${{ inputs.tf-fmt-recursive }} -diff
        continue-on-error: true

      - name: Setup linters
        uses: terraform-linters/setup-tflint@v4

      - name: Terraform Lint
        id: tf-lint
        run: |
          tflint --version
          tflint --init
          tflint -f compact --disable-rule=terraform_typed_variables
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Terraform init
        id: init
        run: terraform init -no-color

      - name: Terraform Workspace
        id: tf-workspace
        run: |
          terraform workspace new ${{ inputs.tf-workspace }} || terraform workspace select ${{ inputs.tf-workspace }}
          terraform workspace show

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file=${{ inputs.environment }}.tfvars

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: always() && github.event_name == 'pull_request'
        with:
          name: plan-pr-${{ github.event.pull_request.number }}.tfplan
          path: "terraform/plan-pr-${{ github.event.pull_request.number }}.tfplan"
          if-no-files-found: error
          overwrite: true

      - uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.git-token }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.workingdir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
